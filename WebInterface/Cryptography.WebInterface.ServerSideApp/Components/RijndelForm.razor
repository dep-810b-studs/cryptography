@using Microsoft.Extensions.Logging
@using Cryptography.Algorithms.Symmetric.CipherSystem
@using Cryptography.WebInterface.ServerSideApp.SymmetricCipher
@using Cryptography.Algorithms.Symmetric
@using System.IO
@using BlazorDownloadFile
@inject ILogger<RijndelForm> Logger
@inject ISymmetricSystem SymmetricCipherSystem
@inject IJSRuntime JsRuntime;


<EditForm Model="@_cipherParamsModel" OnValidSubmit="@HandleSubmit" class="rijndel-wrapper">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="rijndel-selections">
        <h2>Block size </h2>
        <InputRadioGroup @bind-Value="@_cipherParamsModel.CipherBlockSize">
            <InputRadio Value="@CipherBlockSize.Small"/> 128 бит <br/>
            <InputRadio Value="@CipherBlockSize.Middle"/> 192 бит <br/>
            <InputRadio Value="@CipherBlockSize.Big"/> 256 бит <br/>
        </InputRadioGroup>
        <h2>Cipher mode</h2>
        <InputRadioGroup @bind-Value="@_cipherParamsModel.SymmetricCipherMode">
            <InputRadio Value="@SymmetricCipherMode.ElectronicCodeBook"/> @SymmetricCipherMode.ElectronicCodeBook <br/>
            <InputRadio Value="@SymmetricCipherMode.CipherBlockChaining"/> @SymmetricCipherMode.CipherBlockChaining <br/>
            <InputRadio Value="@SymmetricCipherMode.CipherFeedback"/> @SymmetricCipherMode.CipherFeedback <br/>
            <InputRadio Value="@SymmetricCipherMode.OutputFeedback"/> @SymmetricCipherMode.OutputFeedback <br/>
        </InputRadioGroup>
        <h2>Действие</h2>
        <InputRadioGroup @bind-Value="@_cipherParamsModel.CipherAction">
            <InputRadio Value="@CipherAction.Encrypt"/> @CipherAction.Encrypt <br/>
            <InputRadio Value="@CipherAction.Decrypt"/> @CipherAction.Decrypt <br/>
        </InputRadioGroup>
        <button type="submit">@_cipherParamsModel.CipherAction</button>
    </div>
    <div class="rijndel-files">
        <h2>Input File</h2>
        <InputFile OnChange="@OnInputFileChange"/>
        <h2>Key</h2>
        <InputFile OnChange="@OnKeyFileChange"/>
        <h2>Initialization Vector</h2>
        <InputFile OnChange="@OnInitVectorFileChange"/>
    </div>
</EditForm>

@code {

    private CipherParamsModel _cipherParamsModel = new()
    {
        CipherAction = CipherAction.Encrypt,
        CipherBlockSize = CipherBlockSize.Small,
        SymmetricCipherMode = SymmetricCipherMode.ElectronicCodeBook
    };

    private byte[] _dataToProcess;
    private byte[] _processedData;
    private byte[] _key;
    private byte[] _initializationVector;

    [Inject]
    IBlazorDownloadFileService BlazorDownloadFileService { get; set; }

    private void HandleSubmit()
    {
        Logger.LogInformation("file processing started");
        _processedData = SymmetricCipherSystem.HandleEncryption(_cipherParamsModel.CipherAction, _cipherParamsModel.SymmetricCipherMode,
            _cipherParamsModel.CipherBlockSize, _dataToProcess, _key, _initializationVector);
        BlazorDownloadFileService.ClearBuffers();
        BlazorDownloadFileService.AddBuffer(_processedData);
        BlazorDownloadFileService.DownloadBinaryBuffers("processed.jpg");
        Logger.LogInformation("file processing finished");
    }

    private void OnInputFileChange(InputFileChangeEventArgs obj)
    {
        using var stream = obj.File.OpenReadStream();
        using var memoryStream = new MemoryStream();
        stream.CopyTo(memoryStream);
        _dataToProcess = memoryStream.ToArray();
    }

    private void OnKeyFileChange(InputFileChangeEventArgs obj)
    {
        using var stream = obj.File.OpenReadStream();
        using var memoryStream = new MemoryStream();
        stream.CopyTo(memoryStream);
        _key = memoryStream.ToArray();
    }

    private void OnInitVectorFileChange(InputFileChangeEventArgs obj)
    {
        using var stream = obj.File.OpenReadStream();
        using var memoryStream = new MemoryStream();
        stream.CopyTo(memoryStream);
        _initializationVector = memoryStream.ToArray();
    }

}